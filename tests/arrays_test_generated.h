// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ARRAYSTEST_MYGAME_EXAMPLE_H_
#define FLATBUFFERS_GENERATED_ARRAYSTEST_MYGAME_EXAMPLE_H_

#include "flatbuffers/flatbuffers.h"

namespace MyGame {
namespace Example {

struct ArrayStruct;

struct TestStruct;

struct ArrayTable;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) ArrayStruct FLATBUFFERS_FINAL_CLASS {
 private:
  float a_;
  int32_t b_[15];
  int8_t c_;
  int8_t padding0__;  int16_t padding1__;

 public:
  ArrayStruct() {
    memset(static_cast<void *>(this), 0, sizeof(ArrayStruct));
  }
  ArrayStruct(float _a, const int32_t *_b, int8_t _c)
      : a_(flatbuffers::EndianScalar(_a)),
        c_(flatbuffers::EndianScalar(_c)),
        padding0__(0),
        padding1__(0) {
    memcpy(b_, _b, 60);
    (void)padding0__;    (void)padding1__;
  }
  float a() const {
    return flatbuffers::EndianScalar(a_);
  }
  void mutate_a(float _a) {
    flatbuffers::WriteScalar(&a_, _a);
  }
  const int32_t *b() const {
    return b_;
  }
  int16_t b_length() const { 
    return 15;
  }
  int32_t *mutable_b() {
    return b_;
  }
  int8_t c() const {
    return flatbuffers::EndianScalar(c_);
  }
  void mutate_c(int8_t _c) {
    flatbuffers::WriteScalar(&c_, _c);
  }
};
FLATBUFFERS_STRUCT_END(ArrayStruct, 68);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) TestStruct FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t a_;
  int8_t padding0__;
  uint16_t b_[21];
  uint32_t c_[2];
  int32_t padding1__;
  double d_[3];
  uint16_t e_;
  int16_t padding2__;  int32_t padding3__;

 public:
  TestStruct() {
    memset(static_cast<void *>(this), 0, sizeof(TestStruct));
  }
  TestStruct(uint8_t _a, const uint16_t *_b, const uint32_t *_c, const double *_d, uint16_t _e)
      : a_(flatbuffers::EndianScalar(_a)),
        padding0__(0),
        padding1__(0),
        e_(flatbuffers::EndianScalar(_e)),
        padding2__(0),
        padding3__(0) {
    (void)padding0__;
    memcpy(b_, _b, 42);
    memcpy(c_, _c, 8);
    (void)padding1__;
    memcpy(d_, _d, 24);
    (void)padding2__;    (void)padding3__;
  }
  uint8_t a() const {
    return flatbuffers::EndianScalar(a_);
  }
  void mutate_a(uint8_t _a) {
    flatbuffers::WriteScalar(&a_, _a);
  }
  const uint16_t *b() const {
    return b_;
  }
  int16_t b_length() const { 
    return 21;
  }
  uint16_t *mutable_b() {
    return b_;
  }
  const uint32_t *c() const {
    return c_;
  }
  int16_t c_length() const { 
    return 2;
  }
  uint32_t *mutable_c() {
    return c_;
  }
  const double *d() const {
    return d_;
  }
  int16_t d_length() const { 
    return 3;
  }
  double *mutable_d() {
    return d_;
  }
  uint16_t e() const {
    return flatbuffers::EndianScalar(e_);
  }
  void mutate_e(uint16_t _e) {
    flatbuffers::WriteScalar(&e_, _e);
  }
};
FLATBUFFERS_STRUCT_END(TestStruct, 88);

struct ArrayTable FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_A = 4,
    VT_B = 6
  };
  const ArrayStruct *a() const {
    return GetStruct<const ArrayStruct *>(VT_A);
  }
  ArrayStruct *mutable_a() {
    return GetStruct<ArrayStruct *>(VT_A);
  }
  const TestStruct *b() const {
    return GetStruct<const TestStruct *>(VT_B);
  }
  TestStruct *mutable_b() {
    return GetStruct<TestStruct *>(VT_B);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<ArrayStruct>(verifier, VT_A) &&
           VerifyField<TestStruct>(verifier, VT_B) &&
           verifier.EndTable();
  }
};

struct ArrayTableBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_a(const ArrayStruct *a) {
    fbb_.AddStruct(ArrayTable::VT_A, a);
  }
  void add_b(const TestStruct *b) {
    fbb_.AddStruct(ArrayTable::VT_B, b);
  }
  explicit ArrayTableBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ArrayTableBuilder &operator=(const ArrayTableBuilder &);
  flatbuffers::Offset<ArrayTable> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ArrayTable>(end);
    return o;
  }
};

inline flatbuffers::Offset<ArrayTable> CreateArrayTable(
    flatbuffers::FlatBufferBuilder &_fbb,
    const ArrayStruct *a = 0,
    const TestStruct *b = 0) {
  ArrayTableBuilder builder_(_fbb);
  builder_.add_b(b);
  builder_.add_a(a);
  return builder_.Finish();
}

inline const MyGame::Example::ArrayTable *GetArrayTable(const void *buf) {
  return flatbuffers::GetRoot<MyGame::Example::ArrayTable>(buf);
}

inline const MyGame::Example::ArrayTable *GetSizePrefixedArrayTable(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<MyGame::Example::ArrayTable>(buf);
}

inline ArrayTable *GetMutableArrayTable(void *buf) {
  return flatbuffers::GetMutableRoot<ArrayTable>(buf);
}

inline bool VerifyArrayTableBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MyGame::Example::ArrayTable>(nullptr);
}

inline bool VerifySizePrefixedArrayTableBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MyGame::Example::ArrayTable>(nullptr);
}

inline void FinishArrayTableBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<MyGame::Example::ArrayTable> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedArrayTableBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<MyGame::Example::ArrayTable> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Example
}  // namespace MyGame

#endif  // FLATBUFFERS_GENERATED_ARRAYSTEST_MYGAME_EXAMPLE_H_
